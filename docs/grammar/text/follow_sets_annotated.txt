<program>                       {$}

<moduleDeclarations>            {DEF, DRIVERDEF}

<moduleDeclaration>             {DECLARE, DEF, DRIVERDEF}

<otherModules>                  {DRIVERDEF, $}

<driverModule>                  {DEF, $}

<module>                        {DEF, DRIVERDEF, $}

<ret>                           {START}

<input_plist>                   {SQBC}

<sub_input_plist>               {SQBC}

<output_plist>                  {SQBC}

<sub_output_plist>              {SQBC}

<dataType>                      {SEMICOL, COMMA, SQBC}

<dynamic_range>                 {SQBC}

<type>                          {SEMICOL, COMMA, SQBC}

<moduleDef>                     {DEF, DRIVERDEF, $}

<statements>                    {END, BREAK}

<statement>                     {GET_VALUE, PRINT, ID, SQBO, USE, DECLARE, SWITCH, FOR, WHILE, END, BREAK}
                                First(<statements>) + Follow(<statements>)

<ioStmt>                        {GET_VALUE, PRINT, ID, SQBO, USE, DECLARE, SWITCH, FOR, WHILE, END, BREAK}
                                Follow(<statement>)

<extended_var>                  {BC}

<var>                           {MUL, DIV, SEMICOL, MUL, DIV, PLUS, MINUS, SEMICOL, BC, AND, OR, LT, LE, GT, GE, EQ, NE}
                                Follow(<sub_factor>)  :TODO:

<whichId>                       {MUL, DIV, SEMICOL, MUL, DIV, PLUS, MINUS, SEMICOL, BC, AND, OR, LT, LE, GT, GE, EQ, NE}
                                Follow(<var>)

<simpleStmt>                    {GET_VALUE, PRINT, ID, SQBO, USE, DECLARE, SWITCH, FOR, WHILE, END, BREAK}
                                Follow(<statement>)

<assignmentStmt>                {GET_VALUE, PRINT, ID, SQBO, USE, DECLARE, SWITCH, FOR, WHILE, END, BREAK}
                                Follow(<simpleStmt>)

<whichStmt>                     {GET_VALUE, PRINT, ID, SQBO, USE, DECLARE, SWITCH, FOR, WHILE, END, BREAK}
                                Follow(<assignmentStmt>)

<lvalueIDStmt>                  {GET_VALUE, PRINT, ID, SQBO, USE, DECLARE, SWITCH, FOR, WHILE, END, BREAK}
                                Follow(<whichStmt>)

<lvalueARRStmt>                 {GET_VALUE, PRINT, ID, SQBO, USE, DECLARE, SWITCH, FOR, WHILE, END, BREAK}
                                Follow(<whichStmt>)

<index>                         {SQBC, RANGEOP}
                                {SQBC, RANGEOP} + Follow(<dynamic_range>)

<moduleReuseStmt>               {GET_VALUE, PRINT, ID, SQBO, USE, DECLARE, SWITCH, FOR, WHILE, END, BREAK}
                                Follow(<simpleStmt>)

<optional>                      {USE}

<idList>                        {SQBC, SEMICOL, COLON}

<sub_idList>                    {SQBC, SEMICOL, COLON}
                                Follow(sub_idList)

<expression>                    {SEMICOL}

<arithmeticExpr>                {SEMICOL, BC, AND, OR, LT, LE, GT, GE, EQ, NE}
                                Follow(<expression>) + {BC} + First(<logicalOp>) + Follow(<sub_booleanExpr>)

<sub_arithmeticExpr>            {BO, ID, NUM, RNUM}
                                First(<term>)

<term>                          {PLUS, MINUS, SEMICOL, BC, AND, OR, LT, LE, GT, GE, EQ, NE}
                                Follow(<arithmeticExpr>) + First(<Op1>)

<sub_term>                      {BO, ID, NUM, RNUM, MUL, DIV, PLUS, MINUS, SEMICOL, BC, AND, OR, LT, LE, GT, GE, EQ, NE}
                                First(<factor>)

<factor>                        {MUL, DIV, PLUS, MINUS, SEMICOL, BC, AND, OR, LT, LE, GT, GE, EQ, NE}
                                First(<Op2>) + Follow(<term>)

<sub_factor>                    {MUL, DIV, PLUS, MINUS, SEMICOL, BC, AND, OR, LT, LE, GT, GE, EQ, NE}
                                Follow(<factor>)

<op1>                           {BO, ID, NUM, RNUM}
                                First(<sub_factor>) + First(<sub_arithmeticExpr>)

<op2>                           {BO, ID, NUM, RNUM, MUL, DIV, PLUS, MINUS, SEMICOL, BC, AND, OR, LT, LE, GT, GE, EQ, NE}
                                First(<sub_term>) + Follow(<sub_term>)

<booleanExpr>                   {SEMICOL, BC}

<sub_booleanExpr>               {SEMICOL, BC, AND, OR}

<logicalOp>                     {BO, ID, NUM, RNUM}

<relationalOp>                  {BO, ID, NUM, RNUM}

<declareStmt>                   {GET_VALUE, PRINT, ID, SQBO, USE, DECLARE, SWITCH, FOR, WHILE, END, BREAK}
                                Follow(<statement>)

<conditionalStmt>               {GET_VALUE, PRINT, ID, SQBO, USE, DECLARE, SWITCH, FOR, WHILE, END, BREAK}
                                Follow(<statement>)

<caseStmt>                      {DEFAULT, END}

<nullableCaseStmt>              {DEFAULT, END}

<value>                         {COLON}

<default>                       {END}

<iterativeStmt>                 {GET_VALUE, PRINT, ID, SQBO, USE, DECLARE, SWITCH, FOR, WHILE, END, BREAK}
                                Follow(<statement>)

<range>                         {BC}

